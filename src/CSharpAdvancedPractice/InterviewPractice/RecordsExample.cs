// record - immutable data objects with value-based equality

// diff with classes: records are immutable by default, and they provide built-in value-based equality semantics
// class is reference type, record is value type
// record supports with expression for creating modified copies
// var p3 = p1 with { FirstName = "Ishmael" }; // with exp behind the scene calls Clone()
// What are records used for? used for data transfer objects (DTOs), immutable data structures, state modelling like redux
// ToString() is autogenerated unlike classes where you have to override it


public record Person(string FirstName, int age);

public class RecordDemo
{
    public static void Run()
    {
        var p1 = new Person("Muhammad", 90);
        var p2 = p1 with { age = 100 }; // Create a new record with modified age
        var p3 = p1 with { FirstName = "Ishmael" }; // Create a new record with modified FirstName

        Console.WriteLine(p1);
        Console.WriteLine(p2);
        Console.WriteLine(p3);
     }
}